import{B as p,N as h,C as l,A as u,a as d,D as m,b as g,c as C,d as w,e as f,f as y,g as W,h as T,G as A,i as E,k as R,l as k,m as S,n as b,o as s,T as v}from"./index.d20289d4.js";import{S as N}from"./erc-1155-standard-c4641fc4.browser.esm.18c27e8b.js";import{P as O}from"./thirdweb-checkout-49195812.browser.esm.83f5075a.js";class B{constructor(t){this.events=t}async getAllClaimerAddresses(t){const e=(await this.events.getEvents("TokensClaimed")).filter(r=>r.data&&p.isBigNumber(r.data.tokenId)?r.data.tokenId.eq(t):!1);return Array.from(new Set(e.filter(r=>typeof r.data?.claimer=="string").map(r=>r.data.claimer)))}}class c extends N{static contractRoles=h;constructor(t,e,r){let a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new l(t,e,n,a,r);super(o,r,i),this.abi=u.parse(n),this.metadata=new d(this.contractWrapper,m,this.storage),this.app=new g(this.contractWrapper,this.metadata,this.storage),this.roles=new C(this.contractWrapper,c.contractRoles),this.royalties=new w(this.contractWrapper,this.metadata),this.sales=new f(this.contractWrapper),this.claimConditions=new y(this.contractWrapper,this.metadata,this.storage),this.events=new W(this.contractWrapper),this.history=new B(this.events),this.encoder=new T(this.contractWrapper),this.estimator=new A(this.contractWrapper),this.platformFees=new E(this.contractWrapper),this.interceptor=new R(this.contractWrapper),this.checkout=new O(this.contractWrapper),this.owner=new k(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t){return this.erc1155.getOwned(t)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[S("transfer"),b])}createBatch=s(async(t,e)=>this.erc1155.lazyMint.prepare(t,e));async getClaimTransaction(t,e,r){let a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return this.erc1155.getClaimTransaction(t,e,r,{checkERC20Allowance:a})}claimTo=s((()=>{var t=this;return async function(e,r,a){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return t.erc1155.claimTo.prepare(e,r,a,{checkERC20Allowance:n})}})());claim=s((()=>{var t=this;return async function(e,r){let a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const n=await t.contractWrapper.getSignerAddress();return t.claimTo.prepare(n,e,r,a)}})());burnTokens=s(async(t,e)=>this.erc1155.burn.prepare(t,e));async prepare(t,e,r){return v.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:e,overrides:r})}async call(t,e,r){return this.contractWrapper.call(t,e,r)}}export{c as EditionDrop};
