import{an as b,a4 as T,ao as y,C as f,A as O,a as L,ap as q,b as U,c as F,d as $,h as N,G as x,g as v,k as _,l as M,m as V,n as D,B as u,V as R,X as k,o as w,T as l,ae as z,u as P,y as K,K as W,a8 as B,aq as m,ar as Q,as as g,at as Y,au as j,av as G,af as H,aw as X,ax as S,ay as Z}from"./index.d20289d4.js";import{h as J}from"./hasERC20Allowance-1499f181.browser.esm.9674aafe.js";import{S as tt}from"./erc-1155-standard-c4641fc4.browser.esm.18c27e8b.js";const A=m.object({contractAddress:Z}),et=A.extend({quantity:S}),rt=A.extend({tokenId:g}),at=A.extend({tokenId:g,quantity:g}),nt=et.omit({quantity:!0}).extend({quantityPerReward:S}),st=rt,ot=at.omit({quantity:!0}).extend({quantityPerReward:g}),ct=(()=>nt.extend({totalRewards:g.default("1")}))(),dt=st,it=(()=>ot.extend({totalRewards:g.default("1")}))(),I=(()=>m.object({erc20Rewards:m.array(ct).default([]),erc721Rewards:m.array(dt).default([]),erc1155Rewards:m.array(it).default([])}))(),pt=(()=>I.extend({packMetadata:Q,rewardsPerPack:g.default("1"),openStartTime:Y.default(new Date)}))();class ht{featureName=y.name;constructor(t,e,s,n,a){let o=arguments.length>5&&arguments[5]!==void 0?arguments[5]:new f(t,e,j,n,s);this.contractWrapper=o,this.storage=s,this.chainId=a,this.events=new v(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}open=w((()=>{var t=this;return async function(e){let s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;return l.fromContractWrapper({contractWrapper:t.contractWrapper,method:"openPack",args:[e,s],overrides:{gasLimit:n},parse:a=>{let o=u.from(0);try{o=t.contractWrapper.parseLogs("PackOpenRequested",a?.logs)[0].args.requestId}catch{}return{receipt:a,id:o}}})}})());claimRewards=w((()=>{var t=this;return async function(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:5e5;return l.fromContractWrapper({contractWrapper:t.contractWrapper,method:"claimRewards",args:[],overrides:{gasLimit:e},parse:async s=>{const n=t.contractWrapper.parseLogs("PackOpened",s?.logs);if(n.length===0)throw new Error("PackOpened event not found");const a=n[0].args.rewardUnitsDistributed;return await t.parseRewards(a)}})}})());async parseRewards(t){const e=[],s=[],n=[];for(const a of t)switch(a.tokenType){case 0:{const o=await R(this.contractWrapper.getProvider(),a.assetContract);e.push({contractAddress:a.assetContract,quantityPerReward:k(a.totalAmount,o.decimals).toString()});break}case 1:{s.push({contractAddress:a.assetContract,tokenId:a.tokenId.toString()});break}case 2:{n.push({contractAddress:a.assetContract,tokenId:a.tokenId.toString(),quantityPerReward:a.totalAmount.toString()});break}}return{erc20Rewards:e,erc721Rewards:s,erc1155Rewards:n}}async addPackOpenEventListener(t){return this.events.addEventListener("PackOpened",async e=>{t(e.data.packId.toString(),e.data.opener,await this.parseRewards(e.data.rewardUnitsDistributed))})}async canClaimRewards(t){const e=await P(t||await this.contractWrapper.getSignerAddress());return await this.contractWrapper.read("canClaimRewards",[e])}async openAndClaim(t){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;const n=await this.contractWrapper.sendTransaction("openPackAndClaimRewards",[t,e,s],{gasLimit:u.from(5e5)});let a=u.from(0);try{a=this.contractWrapper.parseLogs("PackOpenRequested",n?.logs)[0].args.requestId}catch{}return{receipt:n,id:a}}async getLinkBalance(){return this.getLinkContract().balanceOf(this.contractWrapper.address)}async transferLink(t){await this.getLinkContract().transfer(this.contractWrapper.address,t)}getLinkContract(){const t=G[this.chainId];if(!t)throw new Error(`No LINK token address found for chainId ${this.chainId}`);const e=new f(this.contractWrapper.getSignerOrProvider(),t,H,this.contractWrapper.options,this.storage);return new X(e,this.storage,this.chainId)}}class E extends tt{static contractRoles=b;get vrf(){return T(this._vrf,y)}constructor(t,e,s){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},a=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,i=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new f(t,e,a,n.gasless&&"openzeppelin"in n.gasless?{...n,gasless:{...n.gasless,openzeppelin:{...n.gasless.openzeppelin,useEOAForwarder:!0}}}:n,s);super(i,s,o),this.abi=O.parse(a||[]),this.metadata=new L(this.contractWrapper,q,this.storage),this.app=new U(this.contractWrapper,this.metadata,this.storage),this.roles=new F(this.contractWrapper,E.contractRoles),this.royalties=new $(this.contractWrapper,this.metadata),this.encoder=new N(this.contractWrapper),this.estimator=new x(this.contractWrapper),this.events=new v(this.contractWrapper),this.interceptor=new _(this.contractWrapper),this.owner=new M(this.contractWrapper),this._vrf=this.detectVrf()}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t),this._vrf?.onNetworkUpdated(t)}getAddress(){return this.contractWrapper.address}async get(t){return this.erc1155.get(t)}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t){return this.erc1155.getOwned(t)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[V("transfer"),D])}async getPackContents(t){const{contents:e,perUnitAmounts:s}=await this.contractWrapper.read("getPackContents",[t]),n=[],a=[],o=[];for(let i=0;i<e.length;i++){const c=e[i],r=s[i];switch(c.tokenType){case 0:{const p=await R(this.contractWrapper.getProvider(),c.assetContract),d=k(r,p.decimals),h=k(u.from(c.totalAmount).div(r),p.decimals);n.push({contractAddress:c.assetContract,quantityPerReward:d,totalRewards:h});break}case 1:{a.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString()});break}case 2:{o.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString(),quantityPerReward:r.toString(),totalRewards:u.from(c.totalAmount).div(r).toString()});break}}}return{erc20Rewards:n,erc721Rewards:a,erc1155Rewards:o}}create=w(async t=>{const e=await this.contractWrapper.getSignerAddress();return this.createTo.prepare(e,t)});addPackContents=w(async(t,e)=>{const s=await this.contractWrapper.getSignerAddress(),n=await I.parseAsync(e),{contents:a,numOfRewardUnits:o}=await this.toPackContentArgs(n);return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"addPackContents",args:[t,a,o,s],parse:i=>{const c=this.contractWrapper.parseLogs("PackUpdated",i?.logs);if(c.length===0)throw new Error("PackUpdated event not found");const r=c[0].args.packId;return{id:r,receipt:i,data:()=>this.erc1155.get(r)}}})});createTo=w(async(t,e)=>{const s=await z(e.packMetadata,this.storage),n=await pt.parseAsync(e),{erc20Rewards:a,erc721Rewards:o,erc1155Rewards:i}=n,c={erc20Rewards:a,erc721Rewards:o,erc1155Rewards:i},{contents:r,numOfRewardUnits:p}=await this.toPackContentArgs(c);return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createPack",args:[r,p,s,n.openStartTime,n.rewardsPerPack,await P(t)],parse:d=>{const h=this.contractWrapper.parseLogs("PackCreated",d?.logs);if(h.length===0)throw new Error("PackCreated event not found");const C=h[0].args.packId;return{id:C,receipt:d,data:()=>this.erc1155.get(C)}}})});open=w((()=>{var t=this;return async function(e){let s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;if(t._vrf)throw new Error("This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead");return l.fromContractWrapper({contractWrapper:t.contractWrapper,method:"openPack",args:[e,s],overrides:{gasLimit:n},parse:async a=>{const o=t.contractWrapper.parseLogs("PackOpened",a?.logs);if(o.length===0)throw new Error("PackOpened event not found");const i=o[0].args.rewardUnitsDistributed,c=[],r=[],p=[];for(const d of i)switch(d.tokenType){case 0:{const h=await R(t.contractWrapper.getProvider(),d.assetContract);c.push({contractAddress:d.assetContract,quantityPerReward:k(d.totalAmount,h.decimals).toString()});break}case 1:{r.push({contractAddress:d.assetContract,tokenId:d.tokenId.toString()});break}case 2:{p.push({contractAddress:d.assetContract,tokenId:d.tokenId.toString(),quantityPerReward:d.totalAmount.toString()});break}}return{erc20Rewards:c,erc721Rewards:r,erc1155Rewards:p}}})}})());async toPackContentArgs(t){const e=[],s=[],{erc20Rewards:n,erc721Rewards:a,erc1155Rewards:o}=t,i=this.contractWrapper.getProvider(),c=await this.contractWrapper.getSignerAddress();for(const r of n){const d=(await K(i,r.quantityPerReward,r.contractAddress)).mul(r.totalRewards);if(!await J(this.contractWrapper,r.contractAddress,d))throw new Error(`ERC20 token with contract address "${r.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${r.contractAddress}").setAllowance("${this.getAddress()}", ${d});

`);s.push(r.totalRewards),e.push({assetContract:r.contractAddress,tokenType:0,totalAmount:d,tokenId:0})}for(const r of a){if(!await W(this.contractWrapper.getProvider(),this.getAddress(),r.contractAddress,r.tokenId,c))throw new Error(`ERC721 token "${r.tokenId}" with contract address "${r.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${r.contractAddress}").setApprovalForToken("${this.getAddress()}", ${r.tokenId});

`);s.push("1"),e.push({assetContract:r.contractAddress,tokenType:1,totalAmount:1,tokenId:r.tokenId})}for(const r of o){if(!await W(this.contractWrapper.getProvider(),this.getAddress(),r.contractAddress,r.tokenId,c))throw new Error(`ERC1155 token "${r.tokenId}" with contract address "${r.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${r.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);s.push(r.totalRewards),e.push({assetContract:r.contractAddress,tokenType:2,totalAmount:u.from(r.quantityPerReward).mul(u.from(r.totalRewards)),tokenId:r.tokenId})}return{contents:e,numOfRewardUnits:s}}async prepare(t,e,s){return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:e,overrides:s})}async call(t,e,s){return this.contractWrapper.call(t,e,s)}detectVrf(){if(B(this.contractWrapper,"PackVRF"))return new ht(this.contractWrapper.getSignerOrProvider(),this.contractWrapper.address,this.storage,this.contractWrapper.options,this.chainId)}}export{E as Pack};
