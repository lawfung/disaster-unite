import{N as m,C as u,A as d,a as g,aj as y,b as C,c as w,d as W,e as f,h as T,G as S,g as b,i as A,k as N,ak as E,ai as c,al as R,am as k,l as U,B as s,a3 as p,m as M,n as I,o,T as x}from"./index.ecbe5a87.js";import{S as F}from"./erc-721-standard-c858f30e.browser.esm.008a3d72.js";import{P as _}from"./thirdweb-checkout-49195812.browser.esm.c4d2ecf2.js";class l extends F{static contractRoles=m;constructor(t,a,r){let e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,h=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new u(t,a,n,e,r);super(h,r,i),this.abi=d.parse(n||[]),this.metadata=new g(this.contractWrapper,y,this.storage),this.app=new C(this.contractWrapper,this.metadata,this.storage),this.roles=new w(this.contractWrapper,l.contractRoles),this.royalties=new W(this.contractWrapper,this.metadata),this.sales=new f(this.contractWrapper),this.encoder=new T(this.contractWrapper),this.estimator=new S(this.contractWrapper),this.events=new b(this.contractWrapper),this.platformFees=new A(this.contractWrapper),this.interceptor=new N(this.contractWrapper),this.claimConditions=new E(this.contractWrapper,this.metadata,this.storage),this.signature=new c(this.contractWrapper,this.storage),this.revealer=new R(this.contractWrapper,this.storage,k.name,()=>this.erc721.nextTokenIdToMint()),this.signature=new c(this.contractWrapper,this.storage),this.owner=new U(this.contractWrapper),this.checkout=new _(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async totalSupply(){const[t,a]=await Promise.all([this.totalClaimedSupply(),this.totalUnclaimedSupply()]);return t.add(a)}async getAllClaimed(t){const a=s.from(t?.start||0).toNumber(),r=s.from(t?.count||p).toNumber(),e=Math.min((await this.totalClaimedSupply()).toNumber(),a+r);return await Promise.all(Array.from(Array(e).keys()).map(n=>this.get(n.toString())))}async getAllUnclaimed(t){const a=s.from(t?.start||0).toNumber(),r=s.from(t?.count||p).toNumber(),e=s.from(Math.max((await this.totalClaimedSupply()).toNumber(),a)),n=s.from(Math.min((await this.contractWrapper.read("nextTokenIdToMint",[])).toNumber(),e.toNumber()+r));return await Promise.all(Array.from(Array(n.sub(e).toNumber()).keys()).map(i=>this.erc721.getTokenMetadata(e.add(i).toString())))}async totalClaimedSupply(){return this.erc721.totalClaimedSupply()}async totalUnclaimedSupply(){return this.erc721.totalUnclaimedSupply()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[M("transfer"),I])}createBatch=o(async(t,a)=>this.erc721.lazyMint.prepare(t,a));async getClaimTransaction(t,a,r){return this.erc721.getClaimTransaction(t,a,r)}claimTo=o(async(t,a,r)=>this.erc721.claimTo.prepare(t,a,r));claim=o(async(t,a)=>this.erc721.claim.prepare(t,a));burn=o(async t=>this.erc721.burn.prepare(t));async prepare(t,a,r){return x.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:a,overrides:r})}async call(t,a,r){return this.contractWrapper.call(t,a,r)}}export{l as SignatureDrop};
