import{az as w,C as g,A as W,a as m,aA as f,b,c as y,h as R,G as v,g as A,k as C,B as d,u as s,M as P,af as k,I as S,o as i,T as c}from"./index.258afac1.js";class l{static contractRoles=w;get chainId(){return this._chainId}constructor(t,a,e){let r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,p=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new g(t,a,n,r,e);this._chainId=o,this.abi=W.parse(n||[]),this.contractWrapper=p,this.storage=e,this.metadata=new m(this.contractWrapper,f,this.storage),this.app=new b(this.contractWrapper,this.metadata,this.storage),this.roles=new y(this.contractWrapper,l.contractRoles),this.encoder=new R(this.contractWrapper),this.estimator=new v(this.contractWrapper),this.events=new A(this.contractWrapper),this.interceptor=new C(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAllRecipients(){const t=[];let a=d.from(0);const e=await this.contractWrapper.read("payeeCount",[]);for(;a.lt(e);)try{const r=await this.contractWrapper.read("payee",[a]);t.push(await this.getRecipientSplitPercentage(r)),a=a.add(1)}catch(r){if("method"in r&&r.method.toLowerCase().includes("payee(uint256)"))break;throw r}return t}async balanceOfAllRecipients(){const t=await this.getAllRecipients(),a={};for(const e of t)a[e.address]=await this.balanceOf(e.address);return a}async balanceOfTokenAllRecipients(t){const a=await s(t),e=await this.getAllRecipients(),r={};for(const n of e)r[n.address]=await this.balanceOfToken(n.address,a);return r}async balanceOf(t){const a=await s(t),e=await this.contractWrapper.getProvider().getBalance(this.getAddress()),r=await this.contractWrapper.read("totalReleased",[]),n=e.add(r);return this._pendingPayment(a,n,await this.contractWrapper.read("released",[a]))}async balanceOfToken(t,a){const e=await s(a),r=await s(t),o=await new P(e,k,this.contractWrapper.getProvider()).balanceOf(this.getAddress()),p=await this.contractWrapper.read("totalReleased",[e]),h=o.add(p),u=await this._pendingPayment(r,h,await this.contractWrapper.read("released",[e,r]));return await S(this.contractWrapper.getProvider(),e,u)}async getRecipientSplitPercentage(t){const a=await s(t),[e,r]=await Promise.all([this.contractWrapper.read("totalShares",[]),this.contractWrapper.read("shares",[t])]);return{address:a,splitPercentage:r.mul(d.from(1e7)).div(e).toNumber()/1e5}}withdraw=i(async t=>c.fromContractWrapper({contractWrapper:this.contractWrapper,method:"release(address)",args:[await s(t)]}));withdrawToken=i(async(t,a)=>c.fromContractWrapper({contractWrapper:this.contractWrapper,method:"release(address,address)",args:[await s(a),await s(t)]}));distribute=i(async()=>c.fromContractWrapper({contractWrapper:this.contractWrapper,method:"distribute()",args:[]}));distributeToken=i(async t=>c.fromContractWrapper({contractWrapper:this.contractWrapper,method:"distribute(address)",args:[await s(t)]}));async _pendingPayment(t,a,e){return a.mul(await this.contractWrapper.read("shares",[await s(t)])).div(await this.contractWrapper.read("totalShares",[])).sub(e)}async prepare(t,a,e){return c.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:a,overrides:e})}async call(t,a,e){return this.contractWrapper.call(t,a,e)}}export{l as Split};
