import{aB as u,C as l,A as g,a as d,aC as m,b as w,c as W,h as C,G as f,g as y,e as T,i as R,k as A,ak as b,u as s,m as E,n as S,o as e,T as i}from"./index.ecbe5a87.js";import{S as O}from"./erc-20-standard-10861ed4.browser.esm.b3e020d1.js";class o extends O{static contractRoles=u;constructor(t,a,r){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},c=arguments.length>4?arguments[4]:void 0,p=arguments.length>5?arguments[5]:void 0,h=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new l(t,a,c,n,r);super(h,r,p),this.abi=g.parse(c||[]),this.metadata=new d(this.contractWrapper,m,this.storage),this.app=new w(this.contractWrapper,this.metadata,this.storage),this.roles=new W(this.contractWrapper,o.contractRoles),this.encoder=new C(this.contractWrapper),this.estimator=new f(this.contractWrapper),this.events=new y(this.contractWrapper),this.sales=new T(this.contractWrapper),this.platformFees=new R(this.contractWrapper),this.interceptor=new A(this.contractWrapper),this.claimConditions=new b(this.contractWrapper,this.metadata,this.storage)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.erc20.getValue(await this.contractWrapper.read("getVotes",[await s(t)]))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.read("delegates",[await s(t)])}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[E("transfer"),S])}claim=e((()=>{var t=this;return async function(a){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return t.claimTo.prepare(await t.contractWrapper.getSignerAddress(),a,r)}})());claimTo=e((()=>{var t=this;return async function(a,r){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return t.erc20.claimTo.prepare(a,r,{checkERC20Allowance:n})}})());delegateTo=e(async t=>i.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[await s(t)]}));burnTokens=e(async t=>this.erc20.burn.prepare(t));burnFrom=e(async(t,a)=>this.erc20.burnFrom.prepare(t,a));async prepare(t,a,r){return i.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:a,overrides:r})}async call(t,a,r){return this.contractWrapper.call(t,a,r)}}export{o as TokenDrop};
