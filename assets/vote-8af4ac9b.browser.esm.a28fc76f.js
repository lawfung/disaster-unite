import{C as u,A as g,a as m,aF as W,b as v,h as w,G as f,g as A,k as y,B as b,u as d,aG as h,X as C,M as k,af as P,I as V,V as x,o as p,T as i}from"./index.6dbc486f.js";let l=function(c){return c[c.Against=0]="Against",c[c.For=1]="For",c[c.Abstain=2]="Abstain",c}({});class T{get chainId(){return this._chainId}constructor(t,a,r){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},o=arguments.length>4?arguments[4]:void 0,e=arguments.length>5?arguments[5]:void 0,s=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new u(t,a,o,n,r);this._chainId=e,this.abi=g.parse(o||[]),this.contractWrapper=s,this.storage=r,this.metadata=new m(this.contractWrapper,W,this.storage),this.app=new v(this.contractWrapper,this.metadata,this.storage),this.encoder=new w(this.contractWrapper),this.estimator=new f(this.contractWrapper),this.events=new A(this.contractWrapper),this.interceptor=new y(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(t){const r=(await this.getAll()).filter(n=>n.proposalId.eq(b.from(t)));if(r.length===0)throw new Error("proposal not found");return r[0]}async getAll(){return Promise.all((await this.contractWrapper.read("getAllProposals",[])).map(async t=>({proposalId:t.proposalId,proposer:t.proposer,description:t.description,startBlock:t.startBlock,endBlock:t.endBlock,state:await this.contractWrapper.read("state",[t.proposalId]),votes:await this.getProposalVotes(t.proposalId),executions:t[3].map((a,r)=>({toAddress:t.targets[r],nativeTokenValue:a,transactionData:t.calldatas[r]}))})))}async getProposalVotes(t){const a=await this.contractWrapper.read("proposalVotes",[t]);return[{type:l.Against,label:"Against",count:a.againstVotes},{type:l.For,label:"For",count:a.forVotes},{type:l.Abstain,label:"Abstain",count:a.abstainVotes}]}async hasVoted(t,a){return a||(a=await this.contractWrapper.getSignerAddress()),this.contractWrapper.read("hasVoted",[t,await d(a)])}async canExecute(t){await this.ensureExists(t);const a=await this.get(t),r=a.executions.map(s=>s.toAddress),n=a.executions.map(s=>s.nativeTokenValue),o=a.executions.map(s=>s.transactionData),e=h(a.description);try{return await this.contractWrapper.callStatic().execute(r,n,o,e),!0}catch{return!1}}async balance(){const t=await this.contractWrapper.getProvider().getBalance(this.contractWrapper.address);return{name:"",symbol:"",decimals:18,value:t,displayValue:C(t,18)}}async balanceOfToken(t){const a=new k(await d(t),P,this.contractWrapper.getProvider());return await V(this.contractWrapper.getProvider(),t,await a.balanceOf(this.contractWrapper.address))}async ensureExists(t){try{await this.contractWrapper.read("state",[t])}catch{throw Error(`Proposal ${t} not found`)}}async settings(){const[t,a,r,n,o]=await Promise.all([this.contractWrapper.read("votingDelay",[]),this.contractWrapper.read("votingPeriod",[]),this.contractWrapper.read("token",[]),this.contractWrapper.read("quorumNumerator",[]),this.contractWrapper.read("proposalThreshold",[])]),e=await x(this.contractWrapper.getProvider(),r);return{votingDelay:t.toString(),votingPeriod:a.toString(),votingTokenAddress:r,votingTokenMetadata:e,votingQuorumFraction:n.toString(),proposalTokenThreshold:o.toString()}}propose=p(async(t,a)=>{a||(a=[{toAddress:this.contractWrapper.address,nativeTokenValue:0,transactionData:"0x"}]);const r=a.map(e=>e.toAddress),n=a.map(e=>e.nativeTokenValue),o=a.map(e=>e.transactionData);return i.fromContractWrapper({contractWrapper:this.contractWrapper,method:"propose",args:[r,n,o,t],parse:e=>({id:this.contractWrapper.parseLogs("ProposalCreated",e?.logs)[0].args.proposalId,receipt:e})})});vote=p((()=>{var t=this;return async function(a,r){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"";return await t.ensureExists(a),i.fromContractWrapper({contractWrapper:t.contractWrapper,method:"castVoteWithReason",args:[a,r,n]})}})());execute=p(async t=>{await this.ensureExists(t);const a=await this.get(t),r=a.executions.map(s=>s.toAddress),n=a.executions.map(s=>s.nativeTokenValue),o=a.executions.map(s=>s.transactionData),e=h(a.description);return i.fromContractWrapper({contractWrapper:this.contractWrapper,method:"execute",args:[r,n,o,e]})});async prepare(t,a,r){return i.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:a,overrides:r})}async call(t,a,r){return this.contractWrapper.call(t,a,r)}}export{T as Vote};
