import{aY as I,aJ as o,aP as P,aI as w,aQ as d,aV as m,aL as r,a_ as _,aK as v,aW as E,aZ as C}from"./index.de57dce4.js";import{W as U,U as l,a as b,g as W,A,S as R}from"./url-bc88b2b6.browser.esm.059260de.js";import{n as f}from"./normalizeChainId-e4cc0175.browser.esm.042707b7.js";var c=new WeakMap,h=new WeakMap,u=new WeakSet;class L extends U{constructor(t){let{chains:e,options:a}=t;super({chains:e,options:{reloadOnDisconnect:!1,...a}}),I(this,u),o(this,"id",P.coinbase),o(this,"name","Coinbase Wallet"),o(this,"ready",!0),w(this,c,{writable:!0,value:void 0}),w(this,h,{writable:!0,value:void 0}),o(this,"onAccountsChanged",n=>{n.length===0?this.emit("disconnect"):this.emit("change",{account:d(n[0])})}),o(this,"onChainChanged",n=>{const i=f(n),s=this.isChainUnsupported(i);this.emit("change",{chain:{id:i,unsupported:s}})}),o(this,"onDisconnect",()=>{this.emit("disconnect")})}async connect(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const e=await this.getProvider();this.setupListeners(),this.emit("message",{type:"connecting"});const a=await e.enable(),n=d(a[0]);let i=await this.getChainId(),s=this.isChainUnsupported(i);if(t&&i!==t)try{i=(await this.switchChain(t)).chainId,s=this.isChainUnsupported(i)}catch(p){console.error(`Connected but failed to switch to desired chain ${t}`,p)}return{account:n,chain:{id:i,unsupported:s},provider:new m(e)}}catch(e){throw/(user closed modal|accounts received is empty)/i.test(e.message)?new l(e):e}}async disconnect(){if(!r(this,h))return;const t=await this.getProvider();t.removeListener("accountsChanged",this.onAccountsChanged),t.removeListener("chainChanged",this.onChainChanged),t.removeListener("disconnect",this.onDisconnect),t.disconnect(),t.close()}async getAccount(){const e=await(await this.getProvider()).request({method:"eth_accounts"});if(e.length===0)throw new Error("No accounts found");return d(e[0])}async getChainId(){const t=await this.getProvider();return f(t.chainId)}async getProvider(){if(!r(this,h)){let t=(await _(()=>import("./index.4429030c.js").then(s=>s.i),["assets/index.4429030c.js","assets/index.de57dce4.js","assets/index.5125156f.css","assets/events.b6fa1ee0.js"])).default;typeof t!="function"&&typeof t.default=="function"&&(t=t.default),v(this,c,new t(this.options));const e=r(this,c).walletExtension?.getChainId(),a=this.chains.find(s=>this.options.chainId?s.chainId===this.options.chainId:s.chainId===e)||this.chains[0],n=this.options.chainId||a?.chainId,i=this.options.jsonRpcUrl||a?.rpc[0];v(this,h,r(this,c).makeWeb3Provider(i,n))}return r(this,h)}async getSigner(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const[e,a]=await Promise.all([this.getProvider(),this.getAccount()]);return new m(e,t).getSigner(a)}async isAuthorized(){try{return!!await this.getAccount()}catch{return!1}}async switchChain(t){const e=await this.getProvider(),a=E(t);try{return await e.request({method:"wallet_switchEthereumChain",params:[{chainId:a}]}),this.chains.find(n=>n.chainId===t)??{chainId:t,name:`Chain ${a}`,slug:`${a}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpc:[""],testnet:!1,chain:"ethereum",shortName:"eth"}}catch(n){const i=this.chains.find(s=>s.chainId===t);if(!i)throw new b({chainId:t,connectorId:this.id});if(n.code===4902)try{return await e.request({method:"wallet_addEthereumChain",params:[{chainId:a,chainName:i.name,nativeCurrency:i.nativeCurrency,rpcUrls:W(i),blockExplorerUrls:this.getBlockExplorerUrls(i)}]}),i}catch(s){throw C(this,u,y).call(this,s)?new l(s):new A}throw C(this,u,y).call(this,n)?new l(n):new R(n)}}async setupListeners(){const t=await this.getProvider();t.on("accountsChanged",this.onAccountsChanged),t.on("chainChanged",this.onChainChanged),t.on("disconnect",this.onDisconnect)}async getQrUrl(){if(await this.getProvider(),!r(this,c))throw new Error("Coinbase Wallet SDK not initialized");return r(this,c).getQrUrl()}}function y(g){return/(user rejected)/i.test(g.message)}export{L as CoinbaseWalletConnector};
